if !isfile(joinpath(dirname(@__FILE__), "Defaults.jl"))
    info("Default units, dimensions, and logic are set in ",
        "$(escape_string(joinpath(dirname(@__FILE__), "Defaults.jl")))")
    open(joinpath(dirname(@__FILE__), "Defaults.jl"), "w") do f
        print(f, """
        # Default dimensions and their abbreviations.
        # The dimension symbols are generated by tab completion: \\mbfL is 𝐋, etc.
        # This is kind of a compromise on polluting the namespace.
        @dimension 𝐋 "𝐋" Length
        @dimension 𝐌 "𝐌" Mass
        @dimension 𝐓 "𝐓" Time
        @dimension 𝐈 "𝐈" Current
        @dimension 𝚯 "𝚯" Temperature    # This one is \\mbfTheta
        @dimension 𝐍 "𝐍" Amount
        @dimension 𝐉 "𝐉" Luminosity
        @dimension ∠ "∠" Angle          # This one is just \\angle

        # Define derived dimensions.
        @derived_dimension Area         𝐋^2
        @derived_dimension Volume       𝐋^3
        @derived_dimension Frequency    𝐓^-1
        @derived_dimension Force        𝐌*𝐋/𝐓^2
        @derived_dimension Energy       𝐌*𝐋^2/𝐓^2
        @derived_dimension Momentum     𝐌*𝐋/𝐓
        @derived_dimension Power        𝐋^2*𝐌*𝐓^-3
        @derived_dimension Voltage      𝐈^-1*𝐋^2*𝐌*𝐓^-3

        # Define base units. This is not to imply g is the base SI unit instead of kg.
        # See the documentation for further details.
        # #key:   Symbol  Display  Name      Dimension
        @refunit  m       "m"      Meter     𝐋
        @refunit  s       "s"      Second    𝐓
        @refunit  A       "A"      Ampere    𝐈
        @refunit  K       "K"      Kelvin    𝚯
        @refunit  cd      "cd"     Candela   𝐉
        @refunit  mol     "mol"    Mole      𝐍
        @refunit  g       "g"      Gram      𝐌
        @refunit  rad     "rad"    Radian    ∠

        # These lines allow for μ to be typed with option-m on a Mac.
        # The character encodings are different here so this is less crazy than it looks
        const  µm = μm

        # Length
        #key: Symbol Display    Name        Equivalent to           10^n prefixes?
        @unit mi     "mi"       Mile        (201168//125)*m         false
        @unit yd     "yd"       Yard        (9144//10000)*m         false
        @unit ft     "ft"       Foot        (3048//10000)*m         false
        @unit inch   "in"       Inch        (254//10000)*m          false

        # Area
        @unit ac     "ac"       Acre        (316160658//78125)*m^2  false
        @unit a      "a"        Are         100m^2                  false

        # The hectare is used more frequently than any other power-of-ten of an are.
        const  ha = Unitful.Units{(Unitful.Unit{:Are}(2,1//1),)}()

        # Time
        @unit minute "min"      Minute      60s                     false
        @unit hr     "hr"       Hour        3600s                   false
        @unit d      "dy"       Day         86400s                  false
        @unit wk     "wk"       Week        604800s                 false

        # Angle
        @unit °       "°"       Degree      (pi/180)*rad           false
        import Base: sin, cos, tan, cot, sec, csc
        for y in [:sin, :cos, :tan, :cot, :sec, :csc]
            @eval (\$y){T,D}(x::Quantity{T,D,typeof(°)}) = (\$y)(x.val*pi/180)
            @eval (\$y){T,D}(x::Quantity{T,D,typeof(rad)}) = (\$y)(x.val)
        end

        # Temperature
        @unit °Ra    "°Ra"      Rankine     (5//9)*K                false
        @unit °C     "°C"       Celsius     1K                      false
        Unitful.offsettemp(::Unitful.Unit{:Celsius}) = 27315//100
        @unit °F     "°F"       Fahrenheit  (5//9)*K                false
        Unitful.offsettemp(::Unitful.Unit{:Fahrenheit}) = 45967//100

        # SI and related units
        @unit N      "N"        Newton      1kg*m/s^2               true
        @unit Pa     "Pa"       Pascal      1N/m^2                  true
        @unit J      "J"        Joule       1N*m                    true
        @unit W      "W"        Watt        1J/s                    true
        @unit C      "C"        Coulomb     1A*s                    true
        @unit V      "V"        Volt        1W/A                    true

        const q = 1.6021766208e-19*C        # CODATA 2014; `e` means 2.718...
        @unit eV     "eV"       eV          q*V                     true
        @unit Ω      "Ω"        Ohm         1V/A                    true
        @unit S      "S"        Siemens     1/Ω                     true
        @unit F      "F"        Farad       1s^4*A^2/(kg*m^2)       true
        @unit H      "H"        Henry       1J/(A^2)                true
        @unit T      "T"        Tesla       1kg/(A*s^2)             true
        @unit Wb     "Wb"       Weber       1kg*m^2/(A*s^2)         true

        # Constants (2014 CODATA values)    (uncertainties in final digits)
        const c0 = 299_792_458*m/s          # exact
        const c  = c0
        const μ0 = 4π*(1//10)^7*H/m         # exact (but gets promoted to Float64...)
        const µ0 = μ0                       # magnetic constant
        const ɛ0 = 1/(μ0*c^2)               # exact, electric constant
        const ϵ0 = ɛ0
        const Z0 = μ0*c                     # exact, impedance of free space
        const G  = 6.674_08e-11*m^3/kg/s^2  # (31) gravitational constant
        const h  = 6.626_070_040e-34*J*s    # (81) Planck constant
        const ħ  = h/2π                     # hbar
        const q  = 1.602_176_620_8e-19*C    # (98)  `e` means 2.718... so we use q
                                            # elementary charge
        const Φ0 = h/(2q)                   # Superconducting magnetic flux quantum
        const me = 9.109_383_56e-31*kg      # (11) electron rest mass
        const mn = 1.674_927_471e-27*kg     # (21) neutron rest mass
        const mp = 1.672_621_898e-27*kg     # (21) proton rest mass
        const μB = e*ħ/(2*me)               # Bohr magneton
        const Na = 6.022_140_857e23/mol     # (74) Avogadro constant
        const R  = 8.314_459_8*J/(mol*K)    # (48) molar gass constant
        const k  = 1.380_648_52e-23*(J/K)   # (79) Boltzmann constant
        const σ  = π^2*k^4/(60*ħ^3*c^2)     # Stefan-Boltzmann constant

        # Default rules for addition and subtraction.
        for op in [:+, :-]
            # Can change to min(x,y), x, or y
            @eval (\$op)(x::Unitful.Units, y::Unitful.Units) = max(x,y)
        end

        \"\"\"
        ```
        dB(numerator::Voltage, denominator::Voltage)
        ```

        Give the ratio of two voltages in dB.
        \"\"\"
        function dB(numerator::Voltage, denominator::Voltage)
            20*log10(numerator/denominator)
        end

        \"\"\"
        ```
        dB(numerator::Power, denominator::Power)
        ```

        Give the ratio of two powers in dB.
        \"\"\"
        function dB(numerator::Power, denominator::Power)
            10*log10(numerator/denominator)
        end
        """)
    end
end
